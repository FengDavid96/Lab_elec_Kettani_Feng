#-------------------------------------------------------------------#
#	NIOS II Assembly	 File : \\twin_hanoi_tempate_SIMNIOS.asm
#-------------------------------------------------------------------#

#Adress     Bin-code   source line

                       |                      # Twin Tower of Hanoi game
                       |                      #
                       |                      # assume that input n is in r4, src/dst/tmp in r5/r6/r7
                       |                      # return the number of steps in r2
                       |                      # Stacks A/B/C are located in memory locations [0: 63], [64: 127], and [128, 191]
                       |                      # r8/r9/r10 are designated as stack points for A/B/C
                       |                      # Initially, stack pointers for A/B/C point to memory locations 0, 64, and 128 (initial TOS)
                       |                      # Stacks are assumed to grow upward
                       |                      #============= Sec_1/A : JNISS =================================
                       |                      #--			xor     r2, r2, r2
                       |                      #--			addi    r8, r0, 0       # r8  = 0x0000
                       |                      #--			addi    r9, r0, 64      # r9  = 0x0040
                       |                      #--			addi    r10, r0, 128    # r10 = 0x0060
                       |                      #============= Sec_1/A : JNISS =================================
                       |                      #============= Sec_1/B : SIMNIOS2 ==============================
                       |                      #-- define towers (16 words) in data section
                       |            .data                   
  00000900: 00 x 064     |TowerA:     .skip   16*4              # use TowerA to dump stack in debug window
  00000940: 00 x 064     |TowerB:     .skip   16*4            
  00000980: 00 x 064     |TowerC:     .skip   16*4            
                       |            .extern Graphic_MovePalet  # for Hardware test
                       |            .global HanoiTwinTower    # called by Hardware tester
                       |            .text                   
00F00000:   02000034   |            movia   r8, TowerA        # Stack pointer of Tower A
            42024014   |
00F00008:   02400034   |            movia   r9, TowerB        # Stack pointer of Tower B
            4A425014   |
00F00010:   02800034   |            movia   r10, TowerC       # Stack pointer of Tower C
            52826014   |
                       |                      #============= Sec_1/B : SIMNIOS2 ==============================
                       |                      #------------------
00F00018:              |START:              
                       |                      #------------------
00F00018:   010001C4   |            addi    r4, r0, 7  # n = 7
00F0001C:   0F000240   |            call    HanoiTwinTower  
00F00020:   003B683A   |            trap                      					# replace by "Trap" for SIMNIOS2
                       |                      #------------------Function called by Hardware tester
00F00024:              |HanoiTwinTower:         
                       |                      #------------------
                       |                      # Place a very large disk (which is not part of disks to move) at the bottom of the stack
                       |                      # in order to make the size comparison easier when the pile becomes empty.
00F00024:   047FFFC4   |            addi    r17, r0, 0xffff
00F00028:   44400015   |            stw     r17, 0(r8)
00F0002C:   42000104   |            addi    r8, r8, 4
                       |                      # Place blue disks in pile A
                       |                      #   Blue disks are FF00, FF01, FF02, etc. from the smallest to the largest
00F00030:   0121883A   |            add     r16, r0, r4
00F00034:   847FC014   |            ori     r17, r16, 0xff00
00F00038:   44400015   |loopA:      stw     r17, 0(r8)
00F0003C:   42000104   |            addi    r8, r8, 4
00F00040:   843FFFC4   |            addi    r16, r16, -1
00F00044:   847FC014   |            ori     r17, r16, 0xff00
00F00048:   803FFB1E   |            bne     r16, r0, loopA
                       |                      # Place a very large disk (which is not part of disks to move) at the bottom of the stack
                       |                      # in order to make the size comparison easier when the pile becomes empty.
00F0004C:   04403FC4   |            addi    r17, r0, 0x00ff
00F00050:   4C400015   |            stw     r17, 0(r9)
00F00054:   4A400104   |            addi    r9, r9, 4
                       |                      # Place white disks in pile B
                       |                      #   White disks are 0000, 0001, 0002, etc. from the smallest to the largest
00F00058:   0121883A   |            add     r16, r0, r4
00F0005C:   4C000015   |loopB:      stw     r16, 0(r9)
00F00060:   4A400104   |            addi    r9, r9, 4
00F00064:   843FFFC4   |            addi    r16, r16, -1
00F00068:   803FFC1E   |            bne     r16, r0, loopB
                       |                      # Call swap(n, A, B)
00F0006C:   01400004   |            addi    r5, r0, 0  # src = A
00F00070:   01800044   |            addi    r6, r0, 1  # dst = B
00F00074:   01C00084   |            addi    r7, r0, 2  # tmp = C
00F00078:   0F000800   |            call    Swap
00F0007C:   F800283A   |            ret                     
                       |                      #----------------------------------------------------
                       |                      # Entry : R4= n, R5= src, R6= dest, R7= tmp
                       |                      #			Src, Dst, tmp : 1, 2 or 3
                       |                      # Exit  : R2 < 0 --> error  else  R3= number of move
                       |                      #----------------------------------------------------
00F00080:              |Swap:               
                       |                      #-----------
00F00080:   F800283A   |            ret                     
                       |                      # move error
00F00084:   00BFFFC4   |error:      addi    r2, r0, -1
00F00088:   003B683A   |            trap                      					# replace by "Trap" for SIMNIOS2
